(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{271:function(e,t,n){var o=n(272);"string"==typeof o&&(o=[[e.i,o,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};n(6)(o,a);o.locals&&(e.exports=o.locals)},272:function(e,t,n){(e.exports=n(5)(!1)).push([e.i,"",""])},423:function(e,t,n){"use strict";n.r(t),n.d(t,"default",function(){return h});var o=n(0),a=n.n(o),l=n(62),r=n(3);n(271);function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function c(){return(c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e}).apply(this,arguments)}function s(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function u(e){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function f(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function p(e,t){return(p=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var h=function(e){function t(e){var n,o,a,l,r,c;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),o=this,a=u(t).call(this,e),n=!a||"object"!==i(a)&&"function"!=typeof a?f(o):a,l=f(n),c=function(){n.setState({visible_base:!0},function(){n.childs()})},(r="showBaseModal")in l?Object.defineProperty(l,r,{value:c,enumerable:!0,configurable:!0,writable:!0}):l[r]=c,n.state={childs:[],visible_base:!1},n}var n,h,m;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&p(e,t)}(t,o["Component"]),n=t,(h=[{key:"componentWillMount",value:function(){this.childs()}},{key:"handleBaseCancel",value:function(){var e=this;this.setState({visible_base:!1},function(){e.childs()})}},{key:"showAlertModal",value:function(){var e=this,t=r.Dialog.alert.info(a.a.createElement("div",null,a.a.createElement("p",null,"Some contents..."),a.a.createElement("p",null,"Some contents..."),a.a.createElement("p",null,"Some contents...")),{onClose:function(){e.childs()},title:"Alert",type:"alert",footer:!0,cancel:!1,okText:"知道了"});this.setState({alertDom:t},function(){t.onShow()})}},{key:"handleAlertCancel",value:function(){this.state.alertDom.onClose()}},{key:"childs",value:function(){var e=[];e.push({title:"正常",children:a.a.createElement("div",{className:"code-demo"},a.a.createElement(r.Row,null,a.a.createElement(r.Col,{span:12},a.a.createElement(r.Button,{onClick:this.showBaseModal.bind(this)},"基础"),a.a.createElement(r.Dialog,{title:"基础",visible:this.state.visible_base,onClose:this.handleBaseCancel.bind(this),footer:!0},a.a.createElement("p",null,"Some contents..."),a.a.createElement("p",null,"Some contents..."),a.a.createElement("p",null,"Some contents..."))),a.a.createElement(r.Col,{span:12})))}),e.push({title:"Alert",children:a.a.createElement("div",{className:"code-demo"},a.a.createElement(r.Row,null,a.a.createElement(r.Col,{span:12},a.a.createElement(r.Button,{onClick:this.showAlertModal.bind(this)},"Alert")),a.a.createElement(r.Col,{span:12})))}),this.setState({childs:e})}},{key:"render",value:function(){var e=this.state.childs;return a.a.createElement(l.a,c({},this.props,{className:"main-dialog-box",title:"Dialog",desc:"Dialog的说明",childs:e}))}}])&&s(n.prototype,h),m&&s(n,m),t}();h.displayName="DialogDemo"}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,