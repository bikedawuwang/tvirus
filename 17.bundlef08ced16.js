(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{297:function(e,n,t){var o=t(298);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};t(7)(o,r);o.locals&&(e.exports=o.locals)},298:function(e,n,t){var o=t(16);(e.exports=t(6)(!1)).push([e.i,".align1 {\n  height: 303px;\n  background: url("+o(t(299))+") no-repeat 0 0;\n}\n.align2 {\n  height: 412px;\n  background: url("+o(t(300))+") no-repeat 0 0;\n}\n.align3 {\n  height: 315px;\n  background: url("+o(t(301))+") no-repeat 0 0;\n}\n",""])},299:function(e,n,t){e.exports=t.p+"c880866573912200c8465c235aa96b54.png"},300:function(e,n,t){e.exports=t.p+"fd8a12884ca2cda98820a53331038bd3.png"},301:function(e,n,t){e.exports=t.p+"7b021ce4dadaf1f31919a4e7bf1329fa.png"},437:function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return f});var o=t(0),r=t.n(o),i=t(49);t(297);function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function l(){return(l=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function c(e,n){for(var t=0;t<n.length;t++){var o=n[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function u(e,n){return!n||"object"!==a(n)&&"function"!=typeof n?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):n}function p(e){return(p=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function s(e,n){return(s=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}var f=function(e){function n(e){return function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),u(this,p(n).call(this,e))}var t,a,f;return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&s(e,n)}(n,o["Component"]),t=n,(a=[{key:"render",value:function(){return r.a.createElement(i.a,l({},this.props,{className:"main-align-box",title:"间距",desc:"正如『格式塔学派』中的连续律（Law of Continuity）所描述的，在知觉过程中人们往往倾向于使知觉对象的直线继续成为直线，使曲线继续成为曲线。在界面设计中，将元素进行对齐，既符合用户的认知特性，也能引导视觉流向，让用户更流畅地接收信息。"}),r.a.createElement("blockquote",null,"格式塔学派（德语：Gestalttheorie） ：是心理学重要流派之一，兴起于 20 世纪初的德国，又称为完形心理学；主张人脑的运作原理是整体的，『整体不同于其部件的总和』。——摘自『维基百科』"),r.a.createElement("h3",null,"文案对齐"),r.a.createElement("p",null,"如果页面的字段或段落较短、较散时，需要确定一个统一的视觉起点。"),r.a.createElement("div",{className:"align1"}),r.a.createElement("h3",null,"表单类对齐"),r.a.createElement("p",null,"冒号对齐（右对齐）能让内容锁定在一定范围内，让用户眼球顺着冒号的视觉流，就能找到所有填写项，从而提高填写效率。"),r.a.createElement("div",{className:"align2"}),r.a.createElement("h3",null,"数字类对齐"),r.a.createElement("p",null,"为了快速对比数值大小，建议所有数值取相同有效位数，并且右对齐。"),r.a.createElement("div",{className:"align3"}))}}])&&c(t.prototype,a),f&&c(t,f),n}();f.displayName="AlignDemo"},46:function(e,n,t){var o=t(47);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};t(7)(o,r);o.locals&&(e.exports=o.locals)},47:function(e,n,t){(e.exports=t(6)(!1)).push([e.i,".main {\n  line-height: 2;\n}\n.main h2,\n.main h3,\n.main h4,\n.main h5,\n.main h6 {\n  clear: both;\n  margin: 1.6em 0 0.6em;\n  color: #0d1a26;\n  font-weight: 500;\n}\n.main h3 {\n  font-size: 24px;\n  line-height: 32px;\n}\n.main ul,\n.main ol,\n.main li {\n  padding: 0;\n  margin: 0;\n  list-style: none;\n}\n.main .tv-menu-item {\n  padding-left: 59px;\n}\n.main hr {\n  clear: both;\n  height: 1px;\n  margin: 56px 0;\n  background: #ebedf0;\n  border: 0;\n}\n.main blockquote {\n  margin: 1em 0;\n  padding-left: 0.8em;\n  color: #697b8c;\n  font-size: 90%;\n  border-left: 4px solid #ebedf0;\n}\n.main cite {\n  color: #697b8c;\n  font-size: 90%;\n}\n.main-component {\n  margin: 0 60px;\n  width: 800px;\n}\n.main-component .code-wraper {\n  box-shadow: 0 0 8px 2px rgba(0, 0, 0, 0.15);\n}\n.main-component .code-demo {\n  padding: 35px 35px 20px;\n}\n.main-component .code-demo .tv-button {\n  margin-right: 68px;\n  margin-bottom: 25px;\n}\n.main-component .code-demo .tv-button-group .tv-button {\n  margin-right: 0;\n}\n.main-component .code-block-control {\n  border-top: 1px solid #eee;\n  height: 56px;\n  line-height: 56px;\n  color: #1d1d1d;\n  text-align: center;\n}\n.main-component .language-jsx pre {\n  margin: 0;\n}\n",""])},49:function(e,n,t){"use strict";t.d(n,"a",function(){return f});var o=t(0),r=t.n(o),i=t(3);t(46);function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function l(e,n){for(var t=0;t<n.length;t++){var o=n[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function c(e,n){return!n||"object"!==a(n)&&"function"!=typeof n?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):n}function u(e){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function p(e,n){return(p=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}var s={main:{display:"flex"},left:{flexGrow:0,width:299,minWidth:299,maxWidth:299,height:"auto",borderRight:"1px solid #ebebeb"},right:{flexGrow:1,margin:"0 60px",width:800}},f=function(e){function n(e){var t;return function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),(t=c(this,u(n).call(this,e))).state={children:null},t}var t,a,f;return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&p(e,n)}(n,o["Component"]),t=n,(a=[{key:"onClick",value:function(e,n,t){n&&(t[e]=!0,this.props.history.push({pathname:n,state:{openMaps:t}}))}},{key:"opened",value:function(e){var n=this.props.location.pathname.split("/")[2];return console.log(n,e),n===e}},{key:"createMenus",value:function(){var e=this;return[{title:"设计原则",child:[{title:"人文体验",query:"arts"},{title:"直接了当",query:"direct"},{title:"减少跳转",query:"jump"},{title:"化繁为简",query:"lightweight"},{title:"提供邀请",query:"invitation"},{title:"即时反映",query:"reaction"}]},{title:"设计规范",child:[{title:"间距",query:"margin"},{title:"对齐",query:"align"},{title:"颜色",query:"color"},{title:"布局",query:"layout"},{title:"字体",query:"font"},{title:"图标",query:"icon"},{title:"文案",query:"text"},{title:"数据录入",query:"data"},{title:"数据展示",query:"datashow"},{title:"数据可视化",query:"datavis"},{title:"信息反馈",query:"notice"},{title:"微动效",query:"animation"}]}].map(function(n){var t=r.a.createElement("span",null,n.title),o=n.child.map(function(n){var t=e.opened(n.query);return r.a.createElement(i.Menu.Item,{opened:t,to:"/spec/".concat(n.query)},n.title)});return r.a.createElement(i.Menu.SubMenu,{title:t},o)})}},{key:"render",value:function(){var e=this.props,n=e.children,t=e.className,o=e.title,a=e.desc;return r.a.createElement("main",{style:s.main,className:"main"},r.a.createElement("aside",{style:s.left},r.a.createElement(i.Menu,{className:"tv-menu-vertical-demo",onClick:this.onClick.bind(this)},this.createMenus())),r.a.createElement("section",{style:s.right,className:"main-spec"},r.a.createElement("article",{className:t},r.a.createElement("h1",null,o),r.a.createElement("p",null,a),r.a.createElement("section",{className:"main-body"},n))))}}])&&l(t.prototype,a),f&&l(t,f),n}();f.displayName="Layout"}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,