(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{276:function(e,t,n){"use strict";var o=n(277).CopyToClipboard;o.CopyToClipboard=o,e.exports=o},277:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CopyToClipboard=void 0;var o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),i=c(n(0)),a=c(n(278));function c(e){return e&&e.__esModule?e:{default:e}}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(t.CopyToClipboard=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var r=arguments.length,c=Array(r),s=0;s<r;s++)c[s]=arguments[s];return n=o=l(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(c))),o.onClick=function(e){var t=o.props,n=t.text,r=t.onCopy,c=t.children,l=t.options,s=i.default.Children.only(c),u=(0,a.default)(n,l);r&&r(n,u),s&&s.props&&"function"==typeof s.props.onClick&&s.props.onClick(e)},l(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.default.PureComponent),r(t,[{key:"render",value:function(){var e=this.props,t=(e.text,e.onCopy,e.options,e.children),n=function(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}(e,["text","onCopy","options","children"]),r=i.default.Children.only(t);return i.default.cloneElement(r,o({},n,{onClick:this.onClick}))}}]),t}()).defaultProps={onCopy:void 0,options:void 0}},278:function(e,t,n){"use strict";var o=n(279),r="Copy to clipboard: #{key}, Enter";e.exports=function(e,t){var n,i,a,c,l,s,u=!1;t||(t={}),n=t.debug||!1;try{if(a=o(),c=document.createRange(),l=document.getSelection(),(s=document.createElement("span")).textContent=e,s.style.all="unset",s.style.position="fixed",s.style.top=0,s.style.clip="rect(0, 0, 0, 0)",s.style.whiteSpace="pre",s.style.webkitUserSelect="text",s.style.MozUserSelect="text",s.style.msUserSelect="text",s.style.userSelect="text",s.addEventListener("copy",function(n){n.stopPropagation(),t.format&&(n.preventDefault(),n.clipboardData.clearData(),n.clipboardData.setData(t.format,e))}),document.body.appendChild(s),c.selectNodeContents(s),l.addRange(c),!document.execCommand("copy"))throw new Error("copy command was unsuccessful");u=!0}catch(o){n&&console.error("unable to copy using execCommand: ",o),n&&console.warn("trying IE specific stuff");try{window.clipboardData.setData(t.format||"text",e),u=!0}catch(o){n&&console.error("unable to copy using clipboardData: ",o),n&&console.error("falling back to prompt"),i=function(e){var t=(/mac os x/i.test(navigator.userAgent)?"⌘":"Ctrl")+"+C";return e.replace(/#{\s*key\s*}/g,t)}("message"in t?t.message:r),window.prompt(i,e)}}finally{l&&("function"==typeof l.removeRange?l.removeRange(c):l.removeAllRanges()),s&&document.body.removeChild(s),a()}return u}},279:function(e,t){e.exports=function(){var e=document.getSelection();if(!e.rangeCount)return function(){};for(var t=document.activeElement,n=[],o=0;o<e.rangeCount;o++)n.push(e.getRangeAt(o));switch(t.tagName.toUpperCase()){case"INPUT":case"TEXTAREA":t.blur();break;default:t=null}return e.removeAllRanges(),function(){"Caret"===e.type&&e.removeAllRanges(),e.rangeCount||n.forEach(function(t){e.addRange(t)}),t&&t.focus()}}},280:function(e,t,n){var o=n(281);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(5)(o,r);o.locals&&(e.exports=o.locals)},281:function(e,t,n){(e.exports=n(4)(!1)).push([e.i,".main-icon-box ul {\n  padding: 1px 0;\n}\n.main-icon-box li {\n  display: inline-block;\n  margin-bottom: 47px;\n  width: 140px;\n  text-align: center;\n  color: #666;\n}\n.main-icon-box li .tv-icon {\n  display: block;\n  margin: 0 0 20px;\n  font-size: 32px;\n}\n.main-icon-box .icon-wrapper h3 {\n  margin-left: 50px;\n  margin-bottom: 30px;\n}\n",""])},455:function(e,t,n){"use strict";n.r(t),n.d(t,"default",function(){return m});var o=n(0),r=n.n(o),i=n(47),a=n(276),c=n(2);n(280);function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(){return(s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e}).apply(this,arguments)}function u(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function p(e,t){return!t||"object"!==l(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function f(e){return(f=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function d(e,t){return(d=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var y={"线框风格":[{title:"操作类",list:["add","less","delete","edit","save","caret-right","caret-up","caret-down","caret-left","right","left","folder","help","calendar","logout","credit-card","guide_manual","home","paper-clip","user","team","bars","export","form","jpg","phone","share-alt","eye-open","eye-close","cloud","search","file-search","file-add","file-text","fullscreem-exit","fullscreem","swap","loading","refresh","download","filter","printer","menu-fold","menu-unfold","key","lock","unlock"]},{title:"情感类",list:["dislike","like","frown","meh","smile"]},{title:"提示类",list:["email","bell","close-circle","exception","exclamation-circl","history","info-circle","question","success","warning"]},{title:"图表类",list:["bar-chart","dot-chart","line-chart","pie-chart"]},{title:"装饰类",list:["environment","fire","gift","heart","money","ai","robot","ai_model"]}],"实底风格":[{title:"导航图标",list:["bi","module_management","questionnaire","opportunity","price","live_in","overview","quality_inspection","review","prediction","personal_center","user_group","setup"]},{title:"操作类",list:["info_solid","success_solid","warn_solid","question_solid","error_solid"]}]},m=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=p(this,f(t).call(this,e))).state={childs:[]},n}var n,l,m;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&d(e,t)}(t,o["Component"]),n=t,(l=[{key:"componentWillMount",value:function(){this.childs()}},{key:"switch",value:function(e){var t=y[e];return r.a.createElement("div",null,t.map(function(e,t){return r.a.createElement("div",{className:"icon-wrapper",key:t},r.a.createElement("h3",null,e.title),r.a.createElement("ul",null,e.list.map(function(e){return r.a.createElement("li",{key:e},r.a.createElement(a.CopyToClipboard,{text:'<Icon type="'.concat(e,'" />'),onCopy:function(){c.Message.info("复制".concat(e,"成功"))}},r.a.createElement("span",null,r.a.createElement(c.Icon,{key:e,type:e}),e)))})))}))}},{key:"childs",value:function(){var e=[];e.push({title:"正常状态",children:["线框风格","实底风格"],func:this.switch.bind(this)}),this.setState({childs:e})}},{key:"render",value:function(){var e=this.state.childs;return r.a.createElement(i.a,s({},this.props,{keyword:"icon",className:"main-icon-box",title:"图标",desc:"汇总了常用的图标集合。",childs:e}))}}])&&u(n.prototype,l),m&&u(n,m),t}();m.displayName="IconDemo"}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,